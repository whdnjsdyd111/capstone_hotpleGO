<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/schema/mybatis-3-mapper.dtd">
<mapper namespace="com.example.demo.mapper.UserMapper">

    <select id="read" resultType="UserVO">
        SELECT * FROM users WHERE uCode = #{code}
    </select>

    <select id="readByEmail" resultType="UserVO">
        SELECT * FROM users WHERE uCode LIKE #{email} || '%'
    </select>

    <insert id="insert">
        INSERT INTO users (uCode, pw, nick, birth, gender, phone
        <if test="!(profileImg == null or profileImg == '')">
            , profileImg
        </if>
        )
        VALUES (#{uCode}, #{pw}, #{nick}, #{birth}, #{gender}, #{phone}

        <if test="!(profileImg == null or profileImg == '')">
            , #{profileImg}
        </if>
        )
    </insert>

    <select id="readAdmin" resultType="AdminVO">
        SELECT * FROM admin WHERE uCode = #{code}
    </select>

    <select id="readManager" resultType="ManagerVO">
        SELECT u.uCode, pw, nick, birth, gender, phone, profileImg, point, mbti, regDate, mName, mAccount, mBank
        FROM users u JOIN manager m ON u.uCode = m.uCode WHERE m.uCode = #{code}
    </select>

    <select id="readPassword" resultType="String">
        SELECT pw FROM users WHERE uCode = #{code}
    </select>
    
    <insert id="insertManager">
        INSERT ALL
        INTO users (uCode, pw, nick, birth, gender, phone)
        VALUES (#{uCode}, #{pw}, #{nick}, #{birth}, #{gender}, #{phone})
        INTO manager (uCode, mName, mAccount, mBank)
        VALUES (#{uCode}, #{mName}, #{mAccount}, #{mBank})
        SELECT * FROM DUAL
    </insert>

    <update id="updateNick">
        UPDATE users SET nick = #{nick} WHERE uCode = #{uCode}
    </update>

    <update id="updateAccount">
        UPDATE manager SET mAccount = #{mAccount}, mBank = #{mBank} WHERE uCode = #{code}
    </update>

    <update id="updatePw">
        UPDATE users SET pw = #{pw} WHERE uCode = #{code}
    </update>

    <select id="getMbti" resultType="String">
        SELECT mbti FROM users WHERE uCode = #{uCode}
    </select>

    <update id="updateMbti">
        UPDATE users SET mbti = #{mbti} WHERE uCode = #{uCode}
    </update>

    <select id="getPickCourseList" resultType="CourseVO">
        SELECT p.*, c.csTitle, c.csWith, c.csNum from pick_list p
        JOIN course c ON (c.csCode = p.csCode) WHERE p.uCode = #{uCode}
        ORDER BY p.pickId DESC
    </select>

<!--    SELECT * FROM course_info NATURAL JOIN hotple-->
<!--    WHERE csCode IN (SELECT csCode FROM course WHERE uCode = #{uCode}) AND SUBSTR(csCode, -1) = 'N'-->
<!--    ORDER BY cscode DESC, ciIndex-->
    <select id="getPickHotpleList" resultType="HotpleVO">
        SELECT h.htId, h.busnName, h.htAddr, h.htCont, p.uCode FROM hotple h join pick_list p
        ON (h.htId = p.htId) WHERE p.uCode = #{uCode} ORDER BY p.pickId DESC
    </select>

    <insert id="pickHotple">
        INSERT INTO pick_list(pickId, htId, uCode)
        VALUES(
        TO_CHAR(SYSTIMESTAMP,'RRMMDDHH24MISS/') || LPAD(seq_pl.NEXTVAL, 2, '0'),
        #{htId},
        #{uCode}
        )
    </insert>

    <insert id="pickCourse">
        INSERT INTO pick_list(pickId, csCode, uCode)
        VALUES(
        TO_CHAR(SYSTIMESTAMP, 'RRMMDDHH24MISS/') || LPAD(seq_pl.NEXTVAL, 2, '0'),
        #{csCode},
        #{uCode}
        )
    </insert>

    <delete id="deletePickHotple">
        DELETE FROM pick_list WHERE htId = #{htId} AND uCode = #{uCode}
    </delete>

    <delete id="deletePickCourse">
        DELETE FROM pick_list WHERE csCode = #{csCode} AND uCode = #{uCode}
    </delete>
</mapper>